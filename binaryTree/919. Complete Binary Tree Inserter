# 919. Complete Binary Tree Inserter
A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.

Design an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.

Implement the CBTInserter class:

- CBTInserter(TreeNode root) Initializes the data structure with the root of the complete binary tree.

- int insert(int v) Inserts a TreeNode into the tree with value Node.val == val so that the tree remains complete, 
  and returns the value of the parent of the inserted TreeNode.
  
- TreeNode get_root() Returns the root node of the tree.

Example 1:

  > Input
  
  > ["CBTInserter", "insert", "insert", "get_root"]
  
  > [[[1, 2]], [3], [4], []]
  
  > Output
  
  > [null, 1, 2, [1, 2, 3, 4]]

  > Explanation
  
  > CBTInserter cBTInserter = new CBTInserter([1, 2]);
  
  > cBTInserter.insert(3);  // return 1
  
  > cBTInserter.insert(4);  // return 2
  
  > cBTInserter.get_root(); // return [1, 2, 3, 4]
  
  
```C++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class CBTInserter {
public:
    CBTInserter(TreeNode* root) {
        this->root = root;
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()) {
            TreeNode* node = q.front();
            q.pop();
            if(node->left) q.push(node->left);
            if(node->right) q.push(node->right);

            if(!(node->left && node->right)) candidate.push(node);
        }
    }
    
    int insert(int val) {
        TreeNode* child = new TreeNode(val);
        TreeNode* node = candidate.front();
        int ret = node->val;
        if(!node->left) node->left = child;
        else {
            node->right = child;
            candidate.pop();
        }
        candidate.push(child);
        return ret;
    }
    
    TreeNode* get_root() {
        return root;
    }
private:
    TreeNode* root;
    queue<TreeNode*> candidate;

};

/**
 * Your CBTInserter object will be instantiated and called as such:
 * CBTInserter* obj = new CBTInserter(root);
 * int param_1 = obj->insert(val);
 * TreeNode* param_2 = obj->get_root();
 */
```
